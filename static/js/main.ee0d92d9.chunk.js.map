{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/search-box.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","changeHandler","type","onChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAgBeA,EARF,SAACC,GAAD,OACX,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCHTC,EAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACP,GACnB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCEnBO,G,YAPG,SAACX,GACjB,IAAQY,EAA+BZ,EAA/BY,YAAaC,EAAkBb,EAAlBa,cACrB,OACE,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCqCjEG,E,kDAnCb,WAAYhB,GAAa,IAAD,8BACtB,cAAMA,IAcRa,cAAgB,SAACI,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALO,E,qDASxB,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAET,SAAUkB,S,oBAO/C,WACE,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAmBpB,EAASqB,QAAO,SAAC3B,GACxC,OAAOA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAGzD,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,cAAee,KAAKf,gBAC7D,cAAC,EAAD,CAAUJ,SAAUoB,W,GA9BVI,aCEHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ee0d92d9.chunk.js","sourcesContent":["import React from 'react';\nimport type { Monster } from '../../typings/Monster';\nimport './card.styles.css';\n\ninterface CardProps {\n  monster: Monster;\n}\n\nconst Card = (props: CardProps) => (\n  <div className=\"card-container\">\n    <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\" />\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>\n);\n\nexport default Card;\n","import React, { PropsWithChildren } from 'react';\nimport type { Monster } from '../../typings/Monster';\nimport './card-list.styles.css';\nimport Card from '../card/card.component';\n\ninterface CardProps {\n  monsters: Monster[];\n}\n\nexport const CardList = (props: PropsWithChildren<CardProps>) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monster) => {\n        return <Card key={monster.id} monster={monster} />;\n      })}\n    </div>\n  );\n};\n","import React from 'react';\nimport './search-box.styles.css';\n\ninterface SearchBoxProps {\n  placeholder: string;\n  changeHandler: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst SearchBox = (props: SearchBoxProps) => {\n  const { placeholder, changeHandler } = props;\n  return (\n    <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={changeHandler} />\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport './App.css';\nimport { Monster } from './typings/Monster';\nimport SearchBox from './components/search-box/search-box.component';\n\ninterface IProps {}\ninterface IState {\n  monsters: Monster[];\n  searchField: string;\n}\n\nclass App extends Component<IProps, IState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder=\"Search monsters\" changeHandler={this.changeHandler} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}